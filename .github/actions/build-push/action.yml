---
name: "Build & Push"
description: "Build and push docker images to a registry"

inputs:
  # Login
  aws-access-key-id:
    description: "AWS access key ID"
    required: true
  aws-secret-access-key:
    description: "AWS secret access key"
    required: true
  aws-region:
    description: "AWS Region"
    required: true
  # Build
  repository:
    description: "Repository in which image is stored"
    required: true
  tags:
    description: "Tags to use with docker/metadata-action"
    required: true
  path:
    description: "Path of the directory that contains the Dockerfile"
    required: true
    default: "."
  dockerfile:
    description: "Name of the Dockerfile"
    required: true
    default: "Dockerfile"
  push:
    description: "Will push the image if true"
    required: true
    default: "true"

outputs:
  # Login
  registry:
    description: "Registry URL"
    value: ${{ steps.ecr-login.outputs.registry }}
  # Build
  version:
    description: "Image version"
    value: ${{ steps.generate-metadata.outputs.version }}
  tags:
    description: "Image tags"
    value: ${{ steps.generate-metadata.outputs.tags }}
  labels:
    description: "Image labels"
    value: ${{ steps.generate-metadata.outputs.labels }}

runs:
  using: "composite"
  steps:
    # AWS credentials setup
    - id: aws-setup
      name: Setting up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id}}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    # Login to ECR
    - id: ecr-login
      name: Authenticating against ECR registry
      uses: aws-actions/amazon-ecr-login@v1

    # Docker buildx setup
    - id: buildx-setup
      name: Setting up Docker buildx
      uses: docker/setup-buildx-action@v2
      with:
        install: true
        config-inline: |
          [worker.oci]
            max-parallelism = 4

    # # Caching setup
    # - id: cache-setup
    #   name: Cache Docker layers
    #   uses: actions/cache@v3
    #   with:
    #     path: /tmp/.buildx-cache
    #     key: ${{ runner.os }}-single-buildx-${{ github.sha }}
    #     restore-keys: |
    #       ${{ runner.os }}-single-buildx

    # Generating image metadata
    - id: generate-metadata
      name: Setup → Image metadata
      uses: docker/metadata-action@v4
      with:
        images: ${{ steps.ecr-login.outputs.registry }}/${{ inputs.repository }}
        tags: ${{ inputs.tags }}

    # Building and pushing image to ECR
    - name: Run → Image build & push
      uses: docker/build-push-action@v4
      with:
        push: ${{ inputs.push }}
        context: ${{ inputs.path }}
        file: ${{ inputs.path }}/${{ inputs.dockerfile }}
        builder: ${{ steps.buildx-setup.outputs.name }}
        tags: ${{ steps.generate-metadata.outputs.tags }}
        labels: ${{ steps.generate-metadata.outputs.labels }}
        cache-to: type=gha,mode=max
        cache-from: type=gha
        # cache-from: type=local,src=/tmp/.buildx-cache
        # cache-to: type=local,dest=/tmp/.buildx-cache-new

  # # Temp fix
  # # https://github.com/docker/build-push-action/issues/252
  # # https://github.com/moby/buildkit/issues/1896
  # - id: cache-move-fix
  #   name: Move cache
  #   shell: bash
  #   run: |
  #     rm -rf /tmp/.buildx-cache
  #     mv /tmp/.buildx-cache-new /tmp/.buildx-cache
