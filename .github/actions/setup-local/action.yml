---
name: "Setup â†’ Local"
description: "Setup the host for local use with poetry"

inputs:
  work-dir:
    description: "Working directory in which the Python project resides"
    required: true
    default: "./app"
  py-version:
    description: "Version of python in use"
    required: true

runs:
  using: "composite"
  steps:
    - id: install-python
      name: Installing Python ${{ inputs.py-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.py-version }}

    - id: install-packages
      name: Install poetry
      # working-directory: ${{ inputs.work-dir }}
      shell: bash
      run: |
        python -m pip install --upgrade pip
        python -m pip install poetry
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project false
        poetry config virtualenvs.path ~/.local/share/virtualenvs

    - id: poetry-version
      name: Get poetry Version
      shell: bash
      run: |
        echo "version=$(poetry --version | grep -oP '[\d\.]+')" >> $GITHUB_OUTPUT

    - id: cache-project-requirements
      name: Cache poetry virtualenv
      uses: actions/cache@v3
      with:
        path: ~/.local/share/virtualenvs
        key: ${{ runner.os }}-py-${{ inputs.py-version }}-poetry-${{ steps.poetry-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-py-${{ inputs.py-version }}-poetry-${{ steps.poetry-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - id: install-project-requirements
      name: Installing project requirements
      working-directory: ${{ inputs.work-dir }}
      shell: bash
      run: |
        poetry install --no-interaction --no-ansi --no-root
      if: steps.cache-project-requirements.outputs.cache-hit != 'true'
